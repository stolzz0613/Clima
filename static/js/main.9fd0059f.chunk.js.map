{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","setBusqueda","setConsultar","useState","error","setError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","weather","code","icon","url","src","alt","parseFloat","temp","toFixed","temp_max","temp_min","App","component","consultar","setResultado","useEffect","a","fetch","response","json","cod","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qMAgBeA,EAbA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OACI,6BACI,yBAAKC,UAAU,mCACX,uBAAGC,KAAK,KAAKD,UAAU,cAAcD,M,cCMtCG,EAVD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACb,OACI,uBAAGH,UAAU,sBAAsBG,IC0E5BC,EA3EI,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAAmB,EAElCC,oBAAS,GAFyB,mBAErDC,EAFqD,KAE9CC,EAF8C,KAGpDC,EAAiBN,EAAjBM,OAAQC,EAASP,EAATO,KAEVC,EAAe,SAAAC,GACjBR,EAAY,eACLD,EADI,eAENS,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAgBlC,OACI,0BACIC,SAda,SAACJ,GAClBA,EAAEK,iBAEoB,KAAlBR,EAAOS,QAAiC,KAAhBR,EAAKQ,QAIjCV,GAAS,GACTH,GAAa,IAJTG,GAAS,KAYRD,EAAQ,kBAAC,EAAD,CAAON,QAAQ,kCAAqC,KAC7D,yBAAKH,UAAU,uBACX,2BACIqB,KAAK,OACLL,KAAK,SACLM,GAAG,SACHL,MAAON,EACPY,SAAUV,IAEd,2BAAOW,QAAQ,UAAf,YAEA,yBAAKxB,UAAU,uBACX,4BACIgB,KAAK,OACLM,GAAG,OACHL,MAAOL,EACPW,SAAUV,GAEV,4BAAQI,MAAM,IAAd,6BACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,YAEJ,2BAAOO,QAAQ,QAAf,eAIR,yBAAKxB,UAAU,uBACX,4BACIqB,KAAK,SACLrB,UAAU,yEAFd,mBC3BDyB,EAlCD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAELV,EAAwBU,EAAxBV,KAAMW,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACpB,IAAKZ,EAAM,OAAO,KAClB,IAAMa,EAAOD,EAAQ,GAAGE,KAClBC,EAAG,2CAAuCF,EAAvC,WAET,OACI,yBAAK7B,UAAU,4BACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,MAAMgC,IAAKD,EAAKE,IAAI,UAEvC,yBAAKjC,UAAU,cACX,wBAAIA,UAAU,cAAcgB,EAA5B,KACA,uBAAGhB,UAAU,eACRkC,WAAWP,EAAKQ,KAAO,OAAQ,IAAIC,QAAQ,GAC5C,yCAEJ,oDACKF,WAAWP,EAAKU,SAAW,OAAQ,IAAID,QAAQ,GAChD,yCAEJ,iDACKF,WAAWP,EAAKW,SAAW,OAAQ,IAAIF,QAAQ,GAChD,4CC6CLG,MAlEf,WAAgB,IAkCVC,EAlCS,EAEmBhC,mBAAS,CACvCG,OAAQ,GACRC,KAAM,KAJK,mBAENP,EAFM,KAEIC,EAFJ,OAOqBE,oBAAS,GAP9B,mBAONiC,EAPM,KAOKlC,EAPL,OAQqBC,mBAAS,IAR9B,mBAQNkB,EARM,KAQKgB,EARL,OASalC,oBAAS,GATtB,mBASNC,EATM,KASCC,EATD,KAWLC,EAAiBN,EAAjBM,OAAQC,EAASP,EAATO,KA8BhB,OA5BA+B,qBAAU,YACU,uCAAG,gCAAAC,EAAA,0DACfH,EADe,uBAEH,mCACRV,EAHW,2DAG+CpB,EAH/C,YAGyDC,EAHzD,kBAEH,oCAFG,SAIMiC,MAAMd,GAJZ,cAIXe,EAJW,gBAKOA,EAASC,OALhB,OAKXrB,EALW,OAMjBgB,EAAahB,GACbnB,GAAa,GAES,QAAlBmB,EAAUsB,IACZtC,GAAS,GAETA,GAAS,GAZM,4CAAH,qDAgBlBuC,KAEC,CAACR,IAIFD,EADE/B,EACU,kBAAC,EAAD,CAAON,QAAQ,sBAEf,kBAAC,EAAD,CAAOuB,UAAWA,IAI9B,kBAAC,WAAD,KACE,kBAAC,EAAD,CACE3B,OAAO,oBAET,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEK,SAAUA,EACVC,YAAaA,EACbC,aAAcA,KAGlB,yBAAKP,UAAU,cACZwC,QCnDKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACL0D,QAAQ1D,MAAMA,EAAM2D,a","file":"static/js/main.9fd0059f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Header = ({ titulo }) => {\n    return (\n        <nav>\n            <div className=\"nav-wrapper light-blue darken-2\">\n                <a href='#!' className=\"brand-logo\">{titulo}</a>\n            </div >\n        </nav>\n    );\n}\n\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\nexport default Header;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Error = ({ mensaje }) => {\n    return (\n        <p className=\"red darken-4 error\">{mensaje}</p>\n    );\n}\n\nError.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\n\nexport default Error;","import React, { useState } from 'react';\nimport Error from \"./Error\";\nimport PropTypes from \"prop-types\";\n\nconst Formulario = ({ busqueda, setBusqueda, setConsultar }) => {\n\n    const [error, setError] = useState(false);\n    const { ciudad, pais } = busqueda;\n\n    const handleChange = e => {\n        setBusqueda({\n            ...busqueda,\n            [e.target.name]: e.target.value\n        });\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (ciudad.trim() === \"\" || pais.trim() === \"\") {\n            setError(true);\n            return;\n        }\n        setError(false);\n        setConsultar(true);\n    }\n\n\n    return (\n        <form\n            onSubmit={handleSubmit}\n        >\n            {error ? <Error mensaje=\"Ambos campos son obligatorios\" /> : null}\n            <div className=\"input-field col s12\">\n                <input\n                    type=\"text\"\n                    name=\"ciudad\"\n                    id=\"ciudad\"\n                    value={ciudad}\n                    onChange={handleChange}\n                />\n                <label htmlFor=\"ciudad\">Ciudad: </label>\n\n                <div className=\"input-field col s12\">\n                    <select\n                        name=\"pais\"\n                        id=\"pais\"\n                        value={pais}\n                        onChange={handleChange}\n                    >\n                        <option value=\"\">--Seleccione un país--</option>\n                        <option value=\"US\">Estados Unidos</option>\n                        <option value=\"MX\">México</option>\n                        <option value=\"AR\">Argentina</option>\n                        <option value=\"CO\">Colombia</option>\n                        <option value=\"CR\">Costa Rica</option>\n                        <option value=\"ES\">España</option>\n                        <option value=\"PE\">Perú</option>\n                    </select>\n                    <label htmlFor=\"pais\">País: </label>\n                </div>\n            </div>\n\n            <div className=\"input-field col s12\">\n                <button\n                    type=\"submit\"\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4  col s12\"\n                >Buscar Clima</button>\n            </div>\n        </form>\n    );\n}\n\n\nFormulario.propTypes = {\n    busqueda: PropTypes.object.isRequired,\n    setBusqueda: PropTypes.func.isRequired,\n    setConsultar: PropTypes.func.isRequired\n}\nexport default Formulario;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Clima = ({ resultado }) => {\n\n    const { name, main, weather } = resultado;\n    if (!name) return null;\n    const code = weather[0].icon;\n    const url = `http://openweathermap.org/img/wn/${code}@2x.png`\n\n    return (\n        <div className=\"card-panel white col s12\">\n            <div className=\" z-depth-4 icon \">\n                <img className=\"img\" src={url} alt=\"icon\" />\n            </div>\n            <div className=\"black-text\">\n                <h2 className=\"left-align\">{name}:</h2>\n                <p className=\"temperatura\">\n                    {parseFloat(main.temp - 273.15, 10).toFixed(2)}\n                    <span>&#x2103;</span>\n                </p>\n                <p>Temperatura Máxima:\n                    {parseFloat(main.temp_max - 273.15, 10).toFixed(2)}\n                    <span>&#x2103;</span>\n                </p>\n                <p>Temperatura Minima:\n                    {parseFloat(main.temp_min - 273.15, 10).toFixed(2)}\n                    <span>&#x2103;</span>\n                </p>\n\n            </div>\n        </div >\n    );\n}\nClima.propTypes = {\n    resultado: PropTypes.object.isRequired\n}\nexport default Clima;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport Clima from \"./components/Clima\";\nimport Error from \"./components/Error\";\n\nfunction App() {\n\n  const [busqueda, setBusqueda] = useState({\n    ciudad: \"\",\n    pais: \"\",\n  });\n\n  const [consultar, setConsultar] = useState(false);\n  const [resultado, setResultado] = useState({});\n  const [error, setError] = useState(false);\n\n  const { ciudad, pais } = busqueda;\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      if (consultar) {\n        const appId = 'c0bc6e680df201af456c8b064eaf7ab8';\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`\n        const response = await fetch(url);\n        const resultado = await response.json();\n        setResultado(resultado);\n        setConsultar(false);\n\n        if (resultado.cod === \"404\") {\n          setError(true);\n        } else {\n          setError(false);\n        }\n      }\n    }\n    consultarAPI();\n\n  }, [consultar])\n\n  let component;\n  if (error) {\n    component = <Error mensaje=\"No hay resultados\" />\n  } else {\n    component = <Clima resultado={resultado} />\n  }\n\n  return (\n    <Fragment>\n      <Header\n        titulo=\"Clima React App\"\n      />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Formulario\n                busqueda={busqueda}\n                setBusqueda={setBusqueda}\n                setConsultar={setConsultar}\n              />\n            </div>\n            <div className=\"col m6 s12\">\n              {component}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}